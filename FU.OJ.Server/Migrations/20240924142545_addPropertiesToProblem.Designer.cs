// <auto-generated />
using System;
using FU.OJ.Server.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FU.OJ.Server.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240924142545_addPropertiesToProblem")]
    partial class addPropertiesToProblem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.ContestParticipants", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Contestid")
                        .HasColumnType("text");

                    b.Property<string>("contest_id")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Contestid");

                    b.HasIndex("contest_id");

                    b.HasIndex("user_id");

                    b.ToTable("ContestsParticipants");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Problem", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<int?>("ac_quantity")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("constraints")
                        .HasColumnType("text");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("difficulty")
                        .HasColumnType("text");

                    b.Property<string>("example_input")
                        .HasColumnType("text");

                    b.Property<string>("example_output")
                        .HasColumnType("text");

                    b.Property<bool?>("hasSolution")
                        .HasColumnType("boolean");

                    b.Property<double?>("memory_limit")
                        .HasColumnType("double precision");

                    b.Property<string>("test_case_id")
                        .HasColumnType("text");

                    b.Property<double?>("time_limit")
                        .HasColumnType("double precision");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Result", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Submissionid")
                        .HasColumnType("text");

                    b.Property<double?>("memory")
                        .HasColumnType("double precision");

                    b.Property<string>("status_description")
                        .HasColumnType("text");

                    b.Property<string>("submission_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Submissionid");

                    b.HasIndex("submission_id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("language_name")
                        .HasColumnType("text");

                    b.Property<string>("problem_id")
                        .HasColumnType("text");

                    b.Property<string>("source_code")
                        .HasColumnType("text");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("submit_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("problem_id");

                    b.HasIndex("user_id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.TestCase", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("folder_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("problem_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("problem_id");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.ContestParticipants", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Contest", null)
                        .WithMany("contestParticipants")
                        .HasForeignKey("Contestid");

                    b.HasOne("FU.OJ.Server.Infra.Models.Contest", "contest")
                        .WithMany()
                        .HasForeignKey("contest_id");

                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("contest");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Result", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Submission", null)
                        .WithMany("results")
                        .HasForeignKey("Submissionid");

                    b.HasOne("FU.OJ.Server.Infra.Models.Submission", "submission")
                        .WithMany()
                        .HasForeignKey("submission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("submission");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Problem", "problem")
                        .WithMany()
                        .HasForeignKey("problem_id");

                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("problem");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.TestCase", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Problem", "problem")
                        .WithMany()
                        .HasForeignKey("problem_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("problem");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.Navigation("contestParticipants");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.Navigation("results");
                });
#pragma warning restore 612, 618
        }
    }
}
