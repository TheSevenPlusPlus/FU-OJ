// <auto-generated />
using System;
using FU.OJ.Server.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FU.OJ.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Blog", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.BlogComment", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("blog_id")
                        .HasColumnType("text");

                    b.Property<string>("blogid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("blogid");

                    b.HasIndex("userId");

                    b.ToTable("BlogComment");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("end_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<DateTime>("start_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.ContestParticipants", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Contestid")
                        .HasColumnType("text");

                    b.Property<string>("contest_id")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Contestid");

                    b.HasIndex("contest_id");

                    b.HasIndex("user_id");

                    b.ToTable("ContestsParticipants");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Problem", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<int?>("ac_quantity")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("constraints")
                        .HasColumnType("text");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("difficulty")
                        .HasColumnType("text");

                    b.Property<string>("example_input")
                        .HasColumnType("text");

                    b.Property<string>("example_output")
                        .HasColumnType("text");

                    b.Property<string>("hasSolution")
                        .HasColumnType("text");

                    b.Property<double?>("memory_limit")
                        .HasColumnType("double precision");

                    b.Property<string>("test_case_id")
                        .HasColumnType("text");

                    b.Property<double?>("time_limit")
                        .HasColumnType("double precision");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Result", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Submissionid")
                        .HasColumnType("text");

                    b.Property<double?>("memory")
                        .HasColumnType("double precision");

                    b.Property<string>("status_description")
                        .HasColumnType("text");

                    b.Property<string>("submission_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("time")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Submissionid");

                    b.HasIndex("submission_id");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("language_name")
                        .HasColumnType("text");

                    b.Property<string>("problem_id")
                        .HasColumnType("text");

                    b.Property<string>("source_code")
                        .HasColumnType("text");

                    b.Property<bool?>("status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("submit_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("user_id")
                        .HasColumnType("text");

                    b.Property<string>("user_name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("problem_id");

                    b.HasIndex("user_id");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.TestCase", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("folder_path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("problem_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("problem_id");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FacebookLink")
                        .HasColumnType("text");

                    b.Property<string>("Fullname")
                        .HasColumnType("text");

                    b.Property<string>("GithubLink")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Slogan")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Blog", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.BlogComment", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Blog", "blog")
                        .WithMany("comments")
                        .HasForeignKey("blogid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("blog");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.ContestParticipants", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Contest", null)
                        .WithMany("contestParticipants")
                        .HasForeignKey("Contestid");

                    b.HasOne("FU.OJ.Server.Infra.Models.Contest", "contest")
                        .WithMany()
                        .HasForeignKey("contest_id");

                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("contest");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Result", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Submission", null)
                        .WithMany("results")
                        .HasForeignKey("Submissionid");

                    b.HasOne("FU.OJ.Server.Infra.Models.Submission", "submission")
                        .WithMany()
                        .HasForeignKey("submission_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("submission");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Problem", "problem")
                        .WithMany()
                        .HasForeignKey("problem_id");

                    b.HasOne("FU.OJ.Server.Infra.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("problem");

                    b.Navigation("user");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.TestCase", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.Problem", "problem")
                        .WithMany()
                        .HasForeignKey("problem_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("problem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FU.OJ.Server.Infra.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FU.OJ.Server.Infra.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Blog", b =>
                {
                    b.Navigation("comments");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Contest", b =>
                {
                    b.Navigation("contestParticipants");
                });

            modelBuilder.Entity("FU.OJ.Server.Infra.Models.Submission", b =>
                {
                    b.Navigation("results");
                });
#pragma warning restore 612, 618
        }
    }
}
